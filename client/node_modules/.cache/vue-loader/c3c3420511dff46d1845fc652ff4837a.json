{"remainingRequest":"/private/var/www/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/private/var/www/client/src/components/Todos.vue?vue&type=script&lang=js&","dependencies":[{"path":"/private/var/www/client/src/components/Todos.vue","mtime":1568353184550},{"path":"/private/var/www/client/node_modules/cache-loader/dist/cjs.js","mtime":1568345311700},{"path":"/private/var/www/client/node_modules/babel-loader/lib/index.js","mtime":1568345305181},{"path":"/private/var/www/client/node_modules/cache-loader/dist/cjs.js","mtime":1568345311700},{"path":"/private/var/www/client/node_modules/vue-loader/lib/index.js","mtime":1568345312299}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport api from '../Api';\n  // visibility filters\n  let filters = {\n    all: function (todos) {\n      return todos\n    },\n    active: function (todos) {\n      return todos.filter(function (todo) {\n        return !todo.completed\n      })\n    },\n    completed: function (todos) {\n      return todos.filter(function (todo) {\n        return todo.completed\n      })\n    }\n  }\n\n  // app Vue instance\n  const Todos = {\n    name: 'Todos',\n    props: {\n      activeUser: Object\n    },\n\n    // app initial state\n    data: function() {\n      return {\n        todos: [],\n        newTodo: '',\n        editedTodo: null,\n        visibility: 'all',\n        loading: true,\n        error: null,\n      }\n    },\n\n    mounted() {\n      api.getAll()\n        .then(response => {\n          this.$log.debug(\"Data loaded: \", response.data)\n          this.todos = response.data\n      })\n        .catch(error => {\n          this.$log.debug(error)\n          this.error = \"Failed to load todos\"\n      })\n        .finally(() => this.loading = false)\n    },\n\n    // computed properties\n    // http://vuejs.org/guide/computed.html\n    computed: {\n      filteredTodos: function () {\n        return filters[this.visibility](this.todos)\n      },\n      remaining: function () {\n        return filters.active(this.todos).length\n      },\n      allDone: {\n        get: function () {\n          return this.remaining === 0\n        },\n        set: function (value) {\n          this.todos.forEach(function (todo) {\n            todo.completed = value\n          })\n        }\n      },\n      userEmail: function () {\n        return this.activeUser ? this.activeUser.email : ''\n      },\n      inputPlaceholder: function () {\n        return this.activeUser ? this.activeUser.given_name + ', what needs to be done?' : 'What needs to be done?'\n      }\n    },\n\n    filters: {\n      pluralize: function (n) {\n        return n === 1 ? 'item' : 'items'\n      }\n    },\n\n    // methods that implement data logic.\n    // note there's no DOM manipulation here at all.\n    methods: {\n\n      addTodo: function () {\n        var value = this.newTodo && this.newTodo.trim()\n        if (!value) {\n          return\n    \t}\n\n        api.createNew(value, false).then( (response) => {\n          this.$log.debug(\"New item created:\", response);\n    \t  this.todos.push({\n            id: response.data.id,\n    \t\ttitle: value,\n    \t\tcompleted: false\n    \t  })\n        }).catch((error) => {\n          this.$log.debug(error);\n    \t  this.error = \"Failed to add todo\"\n    \t});\n\n        this.newTodo = ''\n      },\n\n      setVisibility: function(vis) {\n        this.visibility = vis\n      },\n\n      completeTodo (todo) {\n        api.updateForId(todo.id, todo.title, todo.completed).then((response) => {\n          this.$log.info(\"Item updated:\", response.data);\n        }).catch((error) => {\n          this.$log.debug(error)\n          todo.completed = !todo.completed\n          this.error = \"Failed to update todo\"\n        });\n      },\n      removeTodo: function (todo) { // notice NOT using \"=>\" syntax\n        api.removeForId(todo.id).then(() => { // notice AM using \"=>\" syntax\n          this.$log.debug(\"Item removed:\", todo);\n          this.todos.splice(this.todos.indexOf(todo), 1)\n        }).catch((error) => {\n          this.$log.debug(error);\n          this.error = \"Failed to remove todo\"\n        });\n      },\n\n      editTodo: function (todo) {\n        this.beforeEditCache = todo.title\n        this.editedTodo = todo\n      },\n\n      doneEdit: function (todo) {\n        if (!this.editedTodo) {\n          return\n        }\n        this.$log.info(\"Item updated:\", todo);\n        api.updateForId(todo.id, todo.title.trim(), todo.completed).then((response) => {\n          this.$log.info(\"Item updated:\", response.data);\n          this.editedTodo = null\n          todo.title = todo.title.trim()\n        }).catch((error) => {\n          this.$log.debug(error)\n          this.cancelEdit(todo)\n          this.error = \"Failed to update todo\"\n        });\n\n        if (!todo.title) {\n          this.removeTodo(todo)\n        }\n      },\n\n      cancelEdit: function (todo) {\n        this.editedTodo = null\n        todo.title = this.beforeEditCache\n      },\n\n      removeCompleted: function () {\n        this.todos = filters.active(this.todos)\n      },\n\n      handleErrorClick: function () {\n        this.error = null;\n      },\n\n    },\n\n    // a custom directive to wait for the DOM to be updated\n    // before focusing on the input field.\n    // http://vuejs.org/guide/custom-directive.html\n    directives: {\n      'todo-focus': function (el, binding) {\n        if (binding.value) {\n          el.focus()\n        }\n      }\n    }\n  }\n\n  export default Todos\n",{"version":3,"sources":["Todos.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"Todos.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <h1 class=\"title\">Todos</h1>\n    <h1 class=\"email\">{{userEmail}}</h1>\n    <section class=\"todoapp\">\n      <div v-if=\"loading\">\n        <h1 class=\"loading\">Loading...</h1>\n      </div>\n      <div v-else>\n        <header class=\"header\">\n          <input class=\"new-todo\"\n                 autofocus autocomplete=\"off\"\n                 :placeholder=\"this.inputPlaceholder\"\n                 v-model=\"newTodo\"\n                 @keyup.enter=\"addTodo\">\n        </header>\n        <section class=\"main\" v-show=\"todos.length\" v-cloak>\n          <input class=\"toggle-all\" type=\"checkbox\" v-model=\"allDone\">\n          <ul class=\"todo-list\">\n            <li v-for=\"todo in filteredTodos\"\n                class=\"todo\"\n                :key=\"todo.id\"\n                :class=\"{ completed: todo.completed, editing: todo == editedTodo }\">\n              <div class=\"view\">\n                <input class=\"toggle\" type=\"checkbox\" v-model=\"todo.completed\" @change=\"completeTodo(todo)\">\n                <label @dblclick=\"editTodo(todo)\">{{ todo.title }}</label>\n                <button class=\"destroy\" @click=\"removeTodo(todo)\"></button>\n              </div>\n              <input class=\"edit\" type=\"text\"\n                     v-model=\"todo.title\"\n                     v-todo-focus=\"todo == editedTodo\"\n                     @blur=\"doneEdit(todo)\"\n                     @keyup.enter=\"doneEdit(todo)\"\n                     @keyup.esc=\"cancelEdit(todo)\">\n            </li>\n          </ul>\n        </section>\n        <footer class=\"footer\" v-show=\"todos.length\" v-cloak>\n          <span class=\"todo-count\">\n            <strong>{{ remaining }}</strong> {{ remaining | pluralize }} left\n          </span>\n          <ul class=\"filters\">\n            <li><a href=\"#/all\" @click=\"setVisibility('all')\" :class=\"{ selected: visibility == 'all' }\">All</a></li>\n            <li><a href=\"#/active\" @click=\"setVisibility('active')\" :class=\"{ selected: visibility == 'active' }\">Active</a></li>\n            <li><a href=\"#/completed\" @click=\"setVisibility('completed')\" :class=\"{ selected: visibility == 'completed' }\">Completed</a></li>\n          </ul>\n          <button class=\"clear-completed\" @click=\"removeCompleted\" v-show=\"todos.length > remaining\">\n            Clear completed\n          </button>\n        </footer>\n      </div>\n    </section>\n    <div v-if=\"error\" class=\"error\" @click=\"handleErrorClick\">\n      ERROR: {{this.error}}\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport api from '../Api';\n  // visibility filters\n  let filters = {\n    all: function (todos) {\n      return todos\n    },\n    active: function (todos) {\n      return todos.filter(function (todo) {\n        return !todo.completed\n      })\n    },\n    completed: function (todos) {\n      return todos.filter(function (todo) {\n        return todo.completed\n      })\n    }\n  }\n\n  // app Vue instance\n  const Todos = {\n    name: 'Todos',\n    props: {\n      activeUser: Object\n    },\n\n    // app initial state\n    data: function() {\n      return {\n        todos: [],\n        newTodo: '',\n        editedTodo: null,\n        visibility: 'all',\n        loading: true,\n        error: null,\n      }\n    },\n\n    mounted() {\n      api.getAll()\n        .then(response => {\n          this.$log.debug(\"Data loaded: \", response.data)\n          this.todos = response.data\n      })\n        .catch(error => {\n          this.$log.debug(error)\n          this.error = \"Failed to load todos\"\n      })\n        .finally(() => this.loading = false)\n    },\n\n    // computed properties\n    // http://vuejs.org/guide/computed.html\n    computed: {\n      filteredTodos: function () {\n        return filters[this.visibility](this.todos)\n      },\n      remaining: function () {\n        return filters.active(this.todos).length\n      },\n      allDone: {\n        get: function () {\n          return this.remaining === 0\n        },\n        set: function (value) {\n          this.todos.forEach(function (todo) {\n            todo.completed = value\n          })\n        }\n      },\n      userEmail: function () {\n        return this.activeUser ? this.activeUser.email : ''\n      },\n      inputPlaceholder: function () {\n        return this.activeUser ? this.activeUser.given_name + ', what needs to be done?' : 'What needs to be done?'\n      }\n    },\n\n    filters: {\n      pluralize: function (n) {\n        return n === 1 ? 'item' : 'items'\n      }\n    },\n\n    // methods that implement data logic.\n    // note there's no DOM manipulation here at all.\n    methods: {\n\n      addTodo: function () {\n        var value = this.newTodo && this.newTodo.trim()\n        if (!value) {\n          return\n    \t}\n\n        api.createNew(value, false).then( (response) => {\n          this.$log.debug(\"New item created:\", response);\n    \t  this.todos.push({\n            id: response.data.id,\n    \t\ttitle: value,\n    \t\tcompleted: false\n    \t  })\n        }).catch((error) => {\n          this.$log.debug(error);\n    \t  this.error = \"Failed to add todo\"\n    \t});\n\n        this.newTodo = ''\n      },\n\n      setVisibility: function(vis) {\n        this.visibility = vis\n      },\n\n      completeTodo (todo) {\n        api.updateForId(todo.id, todo.title, todo.completed).then((response) => {\n          this.$log.info(\"Item updated:\", response.data);\n        }).catch((error) => {\n          this.$log.debug(error)\n          todo.completed = !todo.completed\n          this.error = \"Failed to update todo\"\n        });\n      },\n      removeTodo: function (todo) { // notice NOT using \"=>\" syntax\n        api.removeForId(todo.id).then(() => { // notice AM using \"=>\" syntax\n          this.$log.debug(\"Item removed:\", todo);\n          this.todos.splice(this.todos.indexOf(todo), 1)\n        }).catch((error) => {\n          this.$log.debug(error);\n          this.error = \"Failed to remove todo\"\n        });\n      },\n\n      editTodo: function (todo) {\n        this.beforeEditCache = todo.title\n        this.editedTodo = todo\n      },\n\n      doneEdit: function (todo) {\n        if (!this.editedTodo) {\n          return\n        }\n        this.$log.info(\"Item updated:\", todo);\n        api.updateForId(todo.id, todo.title.trim(), todo.completed).then((response) => {\n          this.$log.info(\"Item updated:\", response.data);\n          this.editedTodo = null\n          todo.title = todo.title.trim()\n        }).catch((error) => {\n          this.$log.debug(error)\n          this.cancelEdit(todo)\n          this.error = \"Failed to update todo\"\n        });\n\n        if (!todo.title) {\n          this.removeTodo(todo)\n        }\n      },\n\n      cancelEdit: function (todo) {\n        this.editedTodo = null\n        todo.title = this.beforeEditCache\n      },\n\n      removeCompleted: function () {\n        this.todos = filters.active(this.todos)\n      },\n\n      handleErrorClick: function () {\n        this.error = null;\n      },\n\n    },\n\n    // a custom directive to wait for the DOM to be updated\n    // before focusing on the input field.\n    // http://vuejs.org/guide/custom-directive.html\n    directives: {\n      'todo-focus': function (el, binding) {\n        if (binding.value) {\n          el.focus()\n        }\n      }\n    }\n  }\n\n  export default Todos\n</script>\n\n<style>\n  [v-cloak] { display: none; }\n</style>"]}]}